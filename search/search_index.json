{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OakVar: Genomic Variant Analysis Platform Annotate genomic variants with diverse annotation sources. Make databases of annotated variants. Query annotated variants with filter sets. Make reports in diverse formats. Visualize annotated variants with graphical user interface. Works via CLI and GUI. Easily develop, run, and distribute CLI and GUI genomics apps. OakVar acts as an operating system for genomics apps. Connect genomic data to AI/ML models. OakVar is a genomic variant interpretation platform. Genomic variants can be annotated with diverse annotation sources, stored in databases, queried with filter sets, written to reports in diverse formats, and visualized with graphical user interfaces. Furthermore, OakVar supports command-line and graphical user interface apps which use the annotated variant data generated by OakVar, just like an operating system supports applications on it.","title":"Home"},{"location":"#oakvar-genomic-variant-analysis-platform","text":"Annotate genomic variants with diverse annotation sources. Make databases of annotated variants. Query annotated variants with filter sets. Make reports in diverse formats. Visualize annotated variants with graphical user interface. Works via CLI and GUI. Easily develop, run, and distribute CLI and GUI genomics apps. OakVar acts as an operating system for genomics apps. Connect genomic data to AI/ML models. OakVar is a genomic variant interpretation platform. Genomic variants can be annotated with diverse annotation sources, stored in databases, queried with filter sets, written to reports in diverse formats, and visualized with graphical user interfaces. Furthermore, OakVar supports command-line and graphical user interface apps which use the annotated variant data generated by OakVar, just like an operating system supports applications on it.","title":"OakVar: Genomic Variant Analysis Platform"},{"location":"cli/","text":"CLI Commands Setup ov system setup Run an analysis job ov run Create annotation reports ov report Launch a GUI server ov gui Manage modules List modules ov module ls Install modules ov module install Uninstall modules ov module uninstall Install system modules ov module installbase Update modules ov module update Get information on modules ov module info Manage store accounts Create a store account ov store account create Delete a store account ov store account delete Change a store account password ov store account change Check if logged in on the OakVar store ov store account check Log in on the OakVar store ov store account login Log out from the OakVar store ov store account logout Reset the password of a store account ov store account reset Publish modules Pack a module for registering at the OakVar store ov module pack Register a module at the OakVar store ov store register Manage configuration Manage modules directory ov system md Show system configuration ov config system Show user configuration ov config user Test modules ov util test Utilities Create an example input file ov new exampleinput Create an annotation module template ov new annotator Merge analysis result database files ov util mergesqlite Filter analysis result database files ov util filtersqlite Show analysis result database file information ov util showsqliteinfo","title":"CLI"},{"location":"cli/#cli-commands","text":"","title":"CLI Commands"},{"location":"cli/#setup","text":"ov system setup","title":"Setup"},{"location":"cli/#run-an-analysis-job","text":"ov run","title":"Run an analysis job"},{"location":"cli/#create-annotation-reports","text":"ov report","title":"Create annotation reports"},{"location":"cli/#launch-a-gui-server","text":"ov gui","title":"Launch a GUI server"},{"location":"cli/#manage-modules","text":"","title":"Manage modules"},{"location":"cli/#list-modules","text":"ov module ls","title":"List modules"},{"location":"cli/#install-modules","text":"ov module install","title":"Install modules"},{"location":"cli/#uninstall-modules","text":"ov module uninstall","title":"Uninstall modules"},{"location":"cli/#install-system-modules","text":"ov module installbase","title":"Install system modules"},{"location":"cli/#update-modules","text":"ov module update","title":"Update modules"},{"location":"cli/#get-information-on-modules","text":"ov module info","title":"Get information on modules"},{"location":"cli/#manage-store-accounts","text":"","title":"Manage store accounts"},{"location":"cli/#create-a-store-account","text":"ov store account create","title":"Create a store account"},{"location":"cli/#delete-a-store-account","text":"ov store account delete","title":"Delete a store account"},{"location":"cli/#change-a-store-account-password","text":"ov store account change","title":"Change a store account password"},{"location":"cli/#check-if-logged-in-on-the-oakvar-store","text":"ov store account check","title":"Check if logged in on the OakVar store"},{"location":"cli/#log-in-on-the-oakvar-store","text":"ov store account login","title":"Log in on the OakVar store"},{"location":"cli/#log-out-from-the-oakvar-store","text":"ov store account logout","title":"Log out from the OakVar store"},{"location":"cli/#reset-the-password-of-a-store-account","text":"ov store account reset","title":"Reset the password of a store account"},{"location":"cli/#publish-modules","text":"","title":"Publish modules"},{"location":"cli/#pack-a-module-for-registering-at-the-oakvar-store","text":"ov module pack","title":"Pack a module for registering at the OakVar store"},{"location":"cli/#register-a-module-at-the-oakvar-store","text":"ov store register","title":"Register a module at the OakVar store"},{"location":"cli/#manage-configuration","text":"","title":"Manage configuration"},{"location":"cli/#manage-modules-directory","text":"ov system md","title":"Manage modules directory"},{"location":"cli/#show-system-configuration","text":"ov config system","title":"Show system configuration"},{"location":"cli/#show-user-configuration","text":"ov config user","title":"Show user configuration"},{"location":"cli/#test-modules","text":"ov util test","title":"Test modules"},{"location":"cli/#utilities","text":"","title":"Utilities"},{"location":"cli/#create-an-example-input-file","text":"ov new exampleinput","title":"Create an example input file"},{"location":"cli/#create-an-annotation-module-template","text":"ov new annotator","title":"Create an annotation module template"},{"location":"cli/#merge-analysis-result-database-files","text":"ov util mergesqlite","title":"Merge analysis result database files"},{"location":"cli/#filter-analysis-result-database-files","text":"ov util filtersqlite","title":"Filter analysis result database files"},{"location":"cli/#show-analysis-result-database-file-information","text":"ov util showsqliteinfo","title":"Show analysis result database file information"},{"location":"install/","text":"Installation pip uninstall open-cravat # (if open-cravat is already installed) pip install oakvar ov system setup Setup ov system setup will set up OakVar with sane defaults. Setup process can be customized with a setup file or environment variables, which can be useful in automated deployment. Setup with a file A setup file in yaml format can be used. System configuration fields which are missing in the setup file will be filled with sane defaults. Setup with a file with custom locations for modules and logs can be done as ov system setup -f setup.yaml where setup.yaml is modules_dir: ~/oakvar_modules logs_dir: ~/oakvar_logs Setup with environment variables All system configuration fields can be overridden with environment variables. To override a system config field, set the environment variable OV_ + upper-cased field name to a desired value. For example, System configuration field Environmental variable sys_conf_path OV_SYS_CONF_PATH modules_dir OV_MODULES_DIR log_dir OV_LOG_DIR jobs_dir OV_JOBS_DIR conf_dir OV_CONF_DIR gui_port OV_GUI_PORT The custom setup in the previous section can be done using environmental variables as export OV_MODULES_DIR=~/oakvar_modules export OV_LOGS_DIR=~/oakvar_logs ov system setup","title":"Install"},{"location":"install/#installation","text":"pip uninstall open-cravat # (if open-cravat is already installed) pip install oakvar ov system setup","title":"Installation"},{"location":"install/#setup","text":"ov system setup will set up OakVar with sane defaults. Setup process can be customized with a setup file or environment variables, which can be useful in automated deployment.","title":"Setup"},{"location":"install/#setup-with-a-file","text":"A setup file in yaml format can be used. System configuration fields which are missing in the setup file will be filled with sane defaults. Setup with a file with custom locations for modules and logs can be done as ov system setup -f setup.yaml where setup.yaml is modules_dir: ~/oakvar_modules logs_dir: ~/oakvar_logs","title":"Setup with a file"},{"location":"install/#setup-with-environment-variables","text":"All system configuration fields can be overridden with environment variables. To override a system config field, set the environment variable OV_ + upper-cased field name to a desired value. For example, System configuration field Environmental variable sys_conf_path OV_SYS_CONF_PATH modules_dir OV_MODULES_DIR log_dir OV_LOG_DIR jobs_dir OV_JOBS_DIR conf_dir OV_CONF_DIR gui_port OV_GUI_PORT The custom setup in the previous section can be done using environmental variables as export OV_MODULES_DIR=~/oakvar_modules export OV_LOGS_DIR=~/oakvar_logs ov system setup","title":"Setup with environment variables"},{"location":"overview/","text":"OakVar is a platform for genomic variant analyses. It has the following core functionality: Annotation Query Serve applications Annotation Annotation is adding additional information to a variant. A certain variant may have a clinical consequence such as a genetic disease or a meaning such as being rarely observed in a population. There are many sources of such annotation, and manually finding the annotation from these many sources for many variants can be laborious and daunting. OakVar automates this annotation work by: Loop over variants Standardize annotation sources Manage installation of annotation sources Organize the annotation from different sources by variant The main OakVar command for annotation is ov run . For example, the following command will annotate the variants in a VCF file, input.vcf , with annotation sources ClinVar and COSMIC and generate an annotated VCF file, annotated.vcf as well as a database file, annotated.sqlite . ov run input.vcf -a clinvar cosmic -t vcf -n annotated Query Once variants are annotated, they can be filtered by their annotation, for example to know if a sample has clinically relevant variants or not. OakVar stores annotated variants as a database, and thus variants annotated with OakVar can be filtered with SQL queries. OakVar provides a standard mechanism to query variants regardless of their annotation sources. The main OakVar command for querying variants is ov report . For example, the following command will filter the variants in annotated.sqlite with the filter set defined in filter.json and produce a VCF file of filtered variants, filtered.vcf . ov report annotated.sqlite -f filter.json -s filtered -t vcf Query options can be given to ov run as well. The following command will generate the same annotated.sqlite with annotated variants, but annotated.vcf will already have annotated and filtered variants. ov run input.vcf -a clinvar cosmic -t vcf -n annotated -f filter.json Applications Most common way of using OakVar is the input-to-output workflow using ov run and ov report . However, any Python-based program can access the variants annotated with OakVar since OakVar is a Python library as well. This aspect of OakVar is being actively developed and streamlined. OakVar comes with two built-in web applications - one for job submission and module management and the other for exploring annotation result, as well as one installable web application for exploring the details of a single variant. Check back this page later for exciting future development in this area.","title":"Overview"},{"location":"overview/#annotation","text":"Annotation is adding additional information to a variant. A certain variant may have a clinical consequence such as a genetic disease or a meaning such as being rarely observed in a population. There are many sources of such annotation, and manually finding the annotation from these many sources for many variants can be laborious and daunting. OakVar automates this annotation work by: Loop over variants Standardize annotation sources Manage installation of annotation sources Organize the annotation from different sources by variant The main OakVar command for annotation is ov run . For example, the following command will annotate the variants in a VCF file, input.vcf , with annotation sources ClinVar and COSMIC and generate an annotated VCF file, annotated.vcf as well as a database file, annotated.sqlite . ov run input.vcf -a clinvar cosmic -t vcf -n annotated","title":"Annotation"},{"location":"overview/#query","text":"Once variants are annotated, they can be filtered by their annotation, for example to know if a sample has clinically relevant variants or not. OakVar stores annotated variants as a database, and thus variants annotated with OakVar can be filtered with SQL queries. OakVar provides a standard mechanism to query variants regardless of their annotation sources. The main OakVar command for querying variants is ov report . For example, the following command will filter the variants in annotated.sqlite with the filter set defined in filter.json and produce a VCF file of filtered variants, filtered.vcf . ov report annotated.sqlite -f filter.json -s filtered -t vcf Query options can be given to ov run as well. The following command will generate the same annotated.sqlite with annotated variants, but annotated.vcf will already have annotated and filtered variants. ov run input.vcf -a clinvar cosmic -t vcf -n annotated -f filter.json","title":"Query"},{"location":"overview/#applications","text":"Most common way of using OakVar is the input-to-output workflow using ov run and ov report . However, any Python-based program can access the variants annotated with OakVar since OakVar is a Python library as well. This aspect of OakVar is being actively developed and streamlined. OakVar comes with two built-in web applications - one for job submission and module management and the other for exploring annotation result, as well as one installable web application for exploring the details of a single variant. Check back this page later for exciting future development in this area.","title":"Applications"},{"location":"tutorial/","text":"Installation First, let's install OakVar. pip install oakvar Setup Then, we set up OakVar, including configuration files, system folders, an OakVar account, and OakVar store cache files. ov system setup Check system configuration How OakVar has been set up can be viewed with ov config system command. ov config system publish_url: https://store.oakvar.com store_url: https://store.oakvar.com ... default_assembly: hg38 sys_conf_path: /Users/Shared/oakvar/conf/system.yml root_dir: /Users/Shared/oakvar modules_dir: /Users/Shared/oakvar/modules conf_dir: /Users/Shared/oakvar/conf jobs_dir: /Users/Shared/oakvar/jobs log_dir: /Users/Shared/oakvar/logs modules_dir is where OakVar modules for conversion, mapping, annotation, and reporting as well as OakVar applications are stored. Install ClinVar annotation module In this tutorial, we will annotate variants with ClinVar . To do so, we install the ClinVar module. ov module install clinvar Uninstall a module Just to practice uninstalling a module, we'll install and then uninstall BioGRID . ov module install biogrid ov module uninstall biogrid Create an example input Next, we need some variants to annotate. OakVar has a built-in variant file for this purpose. ov new exampleinput This will create an example input file, exampleinput , in the current directory. Run an annotation job Now, we annotate the example input file with ClinVar and then create a result VCF file with annotated variants. -a option controls annotation sources and -t option report formats. ov run exampleinput -a clinvar -t vcf This will create exampleinuput.vcf which will have the input variants annotated with ClinVar. Generate an Excel report of annotated variants Excel format reporting module is included in OakVar by default. -s option defines the file name of the report file except the extension. ov report exampleinput.sqlite -t excel -s annotated This will generate annotated.xlsx .","title":"Tutorial"},{"location":"tutorial/#installation","text":"First, let's install OakVar. pip install oakvar","title":"Installation"},{"location":"tutorial/#setup","text":"Then, we set up OakVar, including configuration files, system folders, an OakVar account, and OakVar store cache files. ov system setup","title":"Setup"},{"location":"tutorial/#check-system-configuration","text":"How OakVar has been set up can be viewed with ov config system command. ov config system publish_url: https://store.oakvar.com store_url: https://store.oakvar.com ... default_assembly: hg38 sys_conf_path: /Users/Shared/oakvar/conf/system.yml root_dir: /Users/Shared/oakvar modules_dir: /Users/Shared/oakvar/modules conf_dir: /Users/Shared/oakvar/conf jobs_dir: /Users/Shared/oakvar/jobs log_dir: /Users/Shared/oakvar/logs modules_dir is where OakVar modules for conversion, mapping, annotation, and reporting as well as OakVar applications are stored.","title":"Check system configuration"},{"location":"tutorial/#install-clinvar-annotation-module","text":"In this tutorial, we will annotate variants with ClinVar . To do so, we install the ClinVar module. ov module install clinvar","title":"Install ClinVar annotation module"},{"location":"tutorial/#uninstall-a-module","text":"Just to practice uninstalling a module, we'll install and then uninstall BioGRID . ov module install biogrid ov module uninstall biogrid","title":"Uninstall a module"},{"location":"tutorial/#create-an-example-input","text":"Next, we need some variants to annotate. OakVar has a built-in variant file for this purpose. ov new exampleinput This will create an example input file, exampleinput , in the current directory.","title":"Create an example input"},{"location":"tutorial/#run-an-annotation-job","text":"Now, we annotate the example input file with ClinVar and then create a result VCF file with annotated variants. -a option controls annotation sources and -t option report formats. ov run exampleinput -a clinvar -t vcf This will create exampleinuput.vcf which will have the input variants annotated with ClinVar.","title":"Run an annotation job"},{"location":"tutorial/#generate-an-excel-report-of-annotated-variants","text":"Excel format reporting module is included in OakVar by default. -s option defines the file name of the report file except the extension. ov report exampleinput.sqlite -t excel -s annotated This will generate annotated.xlsx .","title":"Generate an Excel report of annotated variants"},{"location":"tutorial/#_1","text":"","title":""}]}